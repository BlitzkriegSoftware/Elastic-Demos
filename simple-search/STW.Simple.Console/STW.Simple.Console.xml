<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STW.Simple.Console</name>
    </assembly>
    <members>
        <member name="T:STW.Simple.Console.Libs.AssembyInfoHelper">
            <summary>
            Helper: Assembly Info
            <para>Translates the <c>CustomAttributeData</c> to a usable string value</para>
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.AssembyInfoHelper.TryParse(System.Reflection.CustomAttributeData,System.String@)">
            <summary>
            Try Parse a <c>System.Reflection.CustomAttributeData</c> into a string
            </summary>
            <param name="attribute">(this)</param>
            <param name="s">Strng to parse into</param>
            <returns>True if success</returns>
        </member>
        <member name="T:STW.Simple.Console.Libs.ConsoleTimer">
            <summary>
            Handy Helper to Time Executions of Tests
            <example>
            Here is a typical snippet, because the class supports <see cref="T:System.IDisposable"/> the time can be started at the top 
            of the using statement and automatically stopped in the dispose
            <code>
            // Stop Watch Created and Started
            using (ConsoleTimer myTimer = new ConsoleTimer( ... )) {
                // Do something you want timed
                var elapsed = myTimer.ElapsedMilliseconds;
                // Stop Watch stopped in DTOR
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.#ctor">
            <summary>
            CTOR
            <para>Also starts timer</para>
            </summary>
        </member>
        <member name="F:STW.Simple.Console.Libs.ConsoleTimer.DefaultTitle">
            <summary>
            Default: Title
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Libs.ConsoleTimer.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.#ctor(System.String)">
            <summary>
            CTOR
            </summary>
            <param name="title">Title</param>
        </member>
        <member name="P:STW.Simple.Console.Libs.ConsoleTimer.StopWatch">
            <summary>
            Stop watch instance
            <para>Do not access directly if possible</para>
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Libs.ConsoleTimer.IsRunning">
            <summary>
            Determine if the stop watch is running
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Libs.ConsoleTimer.ElapsedMilliseconds">
            <summary>
            Returns milliseconds from a running timer
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Libs.ConsoleTimer.ElaspsedTicks">
            <summary>
            Returns the elapsed ticks from a running timer
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.DisplayElaspsedTime(System.Int64)">
            <summary>
            Display milliseconds in a nice string
            </summary>
            <param name="milliseconds">milliseconds</param>
            <returns>nice string</returns>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.DisplayElaspsedTime(System.TimeSpan)">
            <summary>
            Display TimeSpan in a nice string
            </summary>
            <param name="ts">TimeSpan</param>
            <returns>nice string</returns>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.Start">
            <summary>
            Called by constructor, creates a new stop watch and starts it
            Try not to call explictly
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.Stop">
            <summary>
            Called by destructor, stops stopwatch writes log (optionally)
            </summary>
            <returns>Milliseconds Elapsed</returns>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.Reset">
            <summary>
            Reset but do not destroy the timer
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.Cancel">
            <summary>
            Stop and destroy the timer
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.Dispose">
            <summary>
            Generic destructor
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.ConsoleTimer.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">True if so</param>
        </member>
        <member name="T:STW.Simple.Console.Libs.MissingConfigurationException">
            <summary>
            Missing Configuration Exception
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Libs.MissingConfigurationException.ConfigurationItem">
            <summary>
            Configuration Item that is missing
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.MissingConfigurationException.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Libs.MissingConfigurationException.#ctor(System.String)">
            <summary>
            CTOR
            </summary>
            <param name="message">(sic)</param>
        </member>
        <member name="M:STW.Simple.Console.Libs.MissingConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            CTOR
            </summary>
            <param name="message">(sic)</param>
            <param name="innerException">(sic)</param>
        </member>
        <member name="M:STW.Simple.Console.Libs.MissingConfigurationException.#ctor(System.String,System.String)">
            <summary>
            CTOR
            </summary>
            <param name="configurationItem">Configuration Item that is missing</param>
            <param name="message">(sic)</param>
        </member>
        <member name="M:STW.Simple.Console.Libs.MissingConfigurationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            CTOR
            </summary>
            <param name="configurationItem">Configuration Item that is missing</param>
            <param name="message">(sic)</param>
            <param name="innerException">(sic)</param>
        </member>
        <member name="M:STW.Simple.Console.Libs.MissingConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            CTOR
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:STW.Simple.Console.Libs.MissingConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get Object Data
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata">
            <summary>
            Custom Metadata For All Blitzkireg Software Micro-Service
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.Copyright">
            <summary>
            Copyright
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.Company">
            <summary>
            Company
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.SemanticVersion">
            <summary>
            Semantic Version <para>See: semver.org</para>
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.FileVersion">
            <summary>
            File Version
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.PropertySet(System.String,System.String)">
            <summary>
            Property Set
            </summary>
            <param name="name">(sic)</param>
            <param name="value">(sic)</param>
        </member>
        <member name="M:STW.Simple.Console.Models.BlitzAssemblyVersionMetadata.ToString">
            <summary>
            Version String
            </summary>
            <returns></returns>
        </member>
        <member name="T:STW.Simple.Console.Models.CommandOptions">
            <summary>
            Command Line Options
            </summary>
        </member>
        <member name="F:STW.Simple.Console.Models.CommandOptions.RecordsDefault">
            <summary>
            Default: Records
            </summary>
        </member>
        <member name="F:STW.Simple.Console.Models.CommandOptions.QueryResultsDefault">
            <summary>
            Default: Query Results to Return
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.CommandOptions.Verbose">
            <summary>
            Verbose Output
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.CommandOptions.Records">
            <summary>
            Number of Records to Generate
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.CommandOptions.SearchText">
            <summary>
            Search Text
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.CommandOptions.QueryResults">
            <summary>
            Query Results to Return
            </summary>
        </member>
        <member name="T:STW.Simple.Console.Models.Person">
            <summary>
            Models: Person
            </summary>
        </member>
        <member name="F:STW.Simple.Console.Models.Person.EmailSuffix">
            <summary>
            E-Mail Suffix
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.Person.Id">
            <summary>
            PK
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.Person.FirstName">
            <summary>
            First Name
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.Person.LastName">
            <summary>
            Last Name
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.Person.EMail">
            <summary>
            E-Mail
            </summary>
        </member>
        <member name="P:STW.Simple.Console.Models.Person.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Models.Person.ToString">
            <summary>
            To String (debug)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STW.Simple.Console.Models.Person.MakeRandom(System.Int64)">
            <summary>
            Make Random Person
            </summary>
            <returns></returns>
        </member>
        <member name="P:STW.Simple.Console.Program.ProgramMetadata">
            <summary>
            Semantic Version, etc from Assembly Metadata
            </summary>
        </member>
        <member name="T:STW.Simple.Console.Workers.ISearchWorker">
            <summary>
            Interface: Search Worker
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Workers.ISearchWorker.Run(STW.Simple.Console.Models.CommandOptions)">
            <summary>
            Main Entry Point
            </summary>
            <param name="o">CommandOptions</param>
        </member>
        <member name="T:STW.Simple.Console.Workers.SearchWorker">
            <summary>
            Search Worker
            </summary>
        </member>
        <member name="M:STW.Simple.Console.Workers.SearchWorker.#ctor(Microsoft.Extensions.Logging.ILogger{STW.Simple.Console.Workers.SearchWorker},Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            CTOR
            </summary>
            <param name="logger">ILogger</param>
            <param name="config">IConfigurationRoot</param>
        </member>
        <member name="M:STW.Simple.Console.Workers.SearchWorker.Run(STW.Simple.Console.Models.CommandOptions)">
            <summary>
            Run (main logic)
            </summary>
            <param name="o">CommandOptions</param>
        </member>
        <member name="M:STW.Simple.Console.Workers.SearchWorker.DumpRecords(Elastic.Clients.Elasticsearch.SearchResponse{STW.Simple.Console.Models.Person},System.Int32,System.String,System.Int64,System.Boolean)">
            <summary>
            Dump Search Results
            </summary>
            <param name="results">ISearchResponse</param>
            <param name="size">Max requested</param>
            <param name="searchTerm">Search Term</param>
            <param name="ms">Milliseconds</param>
            <param name="verbose">Show verbose output</param>
        </member>
        <member name="M:STW.Simple.Console.Workers.SearchWorker.CreateData(Elastic.Clients.Elasticsearch.ElasticsearchClient,System.Int32,System.String)">
            <summary>
            Create Data
            </summary>
            <param name="client">ElasticClient</param>
            <param name="count">How many to make</param>
            <param name="searchText">search text</param>
            <returns>True if likely</returns>
        </member>
        <member name="T:Elastic_Simple_Search.test.Libs.ElasticHelper">
            <summary>
            Elastic Helper
            </summary>
        </member>
        <member name="M:Elastic_Simple_Search.test.Libs.ElasticHelper.IndexNameFix(System.String)">
            <summary>
            Fix Index Name
            </summary>
            <param name="indexName">Index Name</param>
            <returns>Cleaned up index name</returns>
        </member>
        <member name="M:Elastic_Simple_Search.test.Libs.ElasticHelper.IndexCreateIfMissing``1(Elastic.Clients.Elasticsearch.ElasticsearchClient,System.String@,Elastic.Clients.Elasticsearch.IndexManagement.CreateIndexResponse@,System.Boolean)">
            <summary>
            Create desired index if not there
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="client">(required) ElasticClient</param>
            <param name="indexName">(required) index name</param>
            <param name="dropExisting">Delete and recreate index</param>
            <param name="response">CreateIndexResponse</param>
            <returns>True if created</returns>
        </member>
        <member name="T:Elastic_Simple_Search.test.Libs.EncodingHelper">
            <summary>
            Encoding Helper
            </summary>
        </member>
        <member name="M:Elastic_Simple_Search.test.Libs.EncodingHelper.EncodeToBytes(System.String)">
            <summary>
            Convert string to byte array
            </summary>
            <param name="text">string</param>
            <returns>byte array</returns>
        </member>
        <member name="M:Elastic_Simple_Search.test.Libs.EncodingHelper.DecodeFromBytes(System.Byte[])">
            <summary>
            Convert byte array to string
            </summary>
            <param name="content">byte array</param>
            <returns>string</returns>
        </member>
    </members>
</doc>
